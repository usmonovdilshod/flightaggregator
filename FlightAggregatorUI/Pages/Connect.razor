@page "/connect/{id}"
@using FlightAggregatorShared.TokenHandler
@using FlightAggregatorUI.State


@code {
    public Task<AuthenticationState> AuthState { get; set; }
    [Parameter] public string Id { get; set; } = string.Empty;

    protected async override Task OnParametersSetAsync()
    {
        var client = httpClientFactory.CreateClient(Constant.Client);

        try
        {
            var user = (await AuthState).User;
            if (user.Identity!.IsAuthenticated)
                NavigationManager.NavigateTo("/");
        }
        catch { }

        if (string.IsNullOrEmpty(Id))
            NavigationManager.NavigateTo("/");

        var response = await client.GetAsync($"authorize/token/{Id}");
        if (response.IsSuccessStatusCode)
        {
            string accessToken = await response.Content.ReadAsStringAsync();
            await localStorageService.SaveAsStringAsync(Constant.Key, accessToken);
            var authState = (CustomAuthState)AuthStateProvider;
            authState.NotifyAuthStateChanged();
            NavigationManager.NavigateTo("/", true);
        }
        NavigationManager.NavigateTo("/");
    }
}
